openapi: 3.0.3
info:
  title: Friends
  version: 0.0.1
paths:
  /api/v1/auth/users/:
    get:
      operationId: api_v1_auth_users_list
      tags:
      - api
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_v1_auth_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/v1/auth/users/{id}/:
    get:
      operationId: api_v1_auth_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_v1_auth_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_v1_auth_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_v1_auth_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/users/activation/:
    post:
      operationId: api_v1_auth_users_activation_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActivationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActivationRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /api/v1/auth/users/me/:
    get:
      operationId: api_v1_auth_users_me_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_v1_auth_users_me_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_v1_auth_users_me_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_v1_auth_users_me_destroy
      tags:
      - api
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/users/resend_activation/:
    post:
      operationId: api_v1_auth_users_resend_activation_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_password/:
    post:
      operationId: api_v1_auth_users_reset_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_password_confirm/:
    post:
      operationId: api_v1_auth_users_reset_password_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/v1/auth/users/reset_username/:
    post:
      operationId: api_v1_auth_users_reset_username_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailResetRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/auth/users/reset_username_confirm/:
    post:
      operationId: api_v1_auth_users_reset_username_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirmRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /api/v1/auth/users/set_password/:
    post:
      operationId: api_v1_auth_users_set_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /api/v1/auth/users/set_username/:
    post:
      operationId: api_v1_auth_users_set_username_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsernameRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsernameRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsernameRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
  /api/v1/friends/:
    get:
      operationId: api_v1_friends_retrieve
      summary: Возвращает список друзей текущего пользователя
      tags:
      - FriendsView
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friends'
          description: ''
  /api/v1/friends/{id}:
    delete:
      operationId: api_v1_friends_destroy
      summary: Удаляет пользователя из друзей.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - FriendsView
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/invite/{id}/:
    post:
      operationId: api_v1_invite_create
      summary: Отправляет пользователю запрос дружбы.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - InvitesView
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
          description: ''
    delete:
      operationId: api_v1_invite_destroy
      summary: Отменяет запрос дружбы.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - InvitesView
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/invites/:
    get:
      operationId: api_v1_invites_list
      summary: Получает все входящие и исходящие запросы дружбы.
      parameters:
      - in: query
        name: is_in
        schema:
          type: string
          default: 'true'
      tags:
      - InvitesView
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invites'
          description: ''
  /api/v1/invites/{id}/:
    get:
      operationId: api_v1_invites_retrieve
      summary: Возвращает статус дружбы - друзья, ожидает заявка, ничего.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - InvitesView
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
          description: ''
    post:
      operationId: api_v1_invites_create
      summary: Позволяет отклонить/принять заявку в друзья.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - InvitesView
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
            examples:
              AcceptationExample:
                value:
                  action: accept
                summary: Acceptation example
                description: Test example for the answer_invitation.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
              examples:
                AcceptationExample:
                  value:
                    action: accept
                  summary: Acceptation example
                  description: Test example for the answer_invitation.
          description: ''
  /auth/token/login/:
    post:
      operationId: auth_token_login_create
      description: Use this endpoint to obtain user authentication token.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenCreateRequest'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreate'
          description: ''
  /auth/token/logout/:
    post:
      operationId: auth_token_logout_create
      description: Use this endpoint to logout user (remove user authentication token).
      tags:
      - auth
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    ActivationRequest:
      type: object
      properties:
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - token
      - uid
    Friends:
      type: object
      properties:
        user1:
          type: integer
        user2:
          type: integer
      required:
      - user1
      - user2
    Invites:
      type: object
      properties:
        sender:
          type: integer
        getter:
          type: integer
      required:
      - getter
      - sender
    InvitesRequest:
      type: object
      properties:
        sender:
          type: integer
        getter:
          type: integer
      required:
      - getter
      - sender
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PasswordResetConfirmRequest:
      type: object
      properties:
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
        new_password:
          type: string
          minLength: 1
      required:
      - new_password
      - token
      - uid
    PatchedUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SendEmailResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetPasswordRequest:
      type: object
      properties:
        new_password:
          type: string
          minLength: 1
        current_password:
          type: string
          minLength: 1
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - current_password
      - new_username
    SetUsernameRequest:
      type: object
      properties:
        current_password:
          type: string
          minLength: 1
        new_username:
          type: string
          minLength: 1
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - current_password
      - new_username
    TokenCreate:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    TokenCreateRequest:
      type: object
      properties:
        password:
          type: string
          minLength: 1
        username:
          type: string
          minLength: 1
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
      required:
      - id
      - username
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        id:
          type: integer
          readOnly: true
      required:
      - id
      - username
    UserCreateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
        username:
          type: string
          minLength: 1
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
    UsernameResetConfirm:
      type: object
      properties:
        new_username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - new_username
    UsernameResetConfirmRequest:
      type: object
      properties:
        new_username:
          type: string
          minLength: 1
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - new_username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
